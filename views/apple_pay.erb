<!DOCTYPE html>
 <html lang="en">
   <head>
       <script src="https://js.braintreegateway.com/web/3.4.0/js/client.min.js"></script>
     <script src="https://js.braintreegateway.com/web/3.4.0/js/apple-pay.min.js"></script>
     <script src="https://js.braintreegateway.com/web/3.4.0/js//hosted-fields.min.js"></script>
     <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
     <meta charset="utf-8">
     <meta http-equiv="X-UA-Compatible" content="IE=edge">
     <meta name="viewport" content="width=device-width, initial-scale=1">

   </head>

<body>
  <div class="container">
    <form class="form-signin" id="checkout-form" action="/ios_checkout" method="post">
      <h2 class="form-signin-heading">Apple Pay for Web</h2>
      <button class="apple-pay-button apple-pay-button-white" style="display:none;" id="button"></button>
      <input type="hidden" name="payment_method_nonce"  id="payment_method_nonce" value="">
    </form>
  <div>
</body>
<style>
.apple-pay-button {
    display: inline-block;
    background-size: 100% 60%;
    background-repeat: no-repeat;
    background-position: 50% 50%;
    border-radius: 5px;
    padding: 0px;
    box-sizing: border-box;
    min-width: 200px;
    min-height: 32px;
    max-height: 64px;
}

.apple-pay-button-black {
    background-image: -webkit-named-image(apple-pay-logo-white);
    background-color: black;
}

.apple-pay-button-white {
    background-image: -webkit-named-image(apple-pay-logo-black);
    background-color: white;
}

.apple-pay-button-white-with-line {
    background-image: -webkit-named-image(apple-pay-logo-black);
    background-color: white;
    border: .5px solid black;
}
</style>

<script>

var form = document.querySelector('#checkout-form');
var errorMessage = document.querySelector('#error-message');
var nonce = document.querySelector('input[name="payment_method_nonce"]');
var submitButton = document.querySelector('input[type="submit"]');
var button = document.querySelector('button');


if (!window.ApplePaySession) {
  console.error('This device does not support Apple Pay');
}

if (ApplePaySession.canMakePayments()) {
      document.getElementById("button").style.display = "block";
}

var applePayInstance, paymentsRequest;

 braintree.client.create({
   authorization:  "sandbox_54fcdrnq_yxb4zvxjdctbbppt"
 }, function (clientErr, clientInstance) {
   if (clientErr) {
     console.error('Error creating client:', clientErr);
     return;
   }

   console.log('client');

   braintree.applePay.create({
     client: clientInstance
   }, function (applePayErr, applePay) {
     if (applePayErr) {
       console.error('Error creating applePayInstance:', applePayErr);
       return;
     }
     applePayInstance = applePay;
     console.log('aplepae');
     ApplePaySession.canMakePaymentsWithActiveCard(applePayInstance.merchantIdentifier).then(function (canMakePaymentsWithActiveCard) {
       if (canMakePaymentsWithActiveCard) {
         finishApplePay();
       }
     });
   });
 });

 function finishApplePay() {
   button.addEventListener('click', function (event) {
     event.preventDefault();

     paymentRequest = applePayInstance.createPaymentRequest({
       total: {
         label: 'My Store',
         amount: '19.99'
       }
     });
     console.log(paymentRequest.countryCode);
     console.log(paymentRequest.currencyCode);
     console.log(paymentRequest.merchantCapabilities);
     console.log(paymentRequest.supportedNetworks);

     var session = new ApplePaySession(1, paymentRequest);

     session.onvalidatemerchant = function (event) {
       applePayInstance.performValidation({
         validationURL: event.validationURL,
         displayName: 'My Store'
       }, function (validationErr, merchantSession) {
         if (validationErr) {
           // You should show an error to the user, e.g. 'Apple Pay failed to load.'
           console.error('Error validating merchant:', validationErr);
           session.abort();
           return;
         }
         session.completeMerchantValidation(merchantSession);
       });
     };

     session.onpaymentauthorized = function (event) {
       console.log('Your shipping address is:', event.payment.shippingContact);

       applePayInstance.tokenize({
         token: event.payment.token
       }, function (tokenizeErr, payload) {
         if (tokenizeErr) {
           console.error('Error tokenizing Apple Pay:', tokenizeErr);
           session.completePayment(ApplePaySession.STATUS_FAILURE);
           return;
         }
         session.completePayment(ApplePaySession.STATUS_SUCCESS);
         alert("got a nonce");
         console.log(payload);
         document.getElementById("payment_method_nonce").value=payload.nonce;
         // Send payload.nonce to your server.
         document.getElementById("checkout-form").submit();
       });
     };
     session.begin();
   });
 }

</script>
</html>
