<!DOCTYPE html>
 <html lang="en">
   <head>
     <script src="https://js.braintreegateway.com/web/3.0.2/js/client.min.js"></script>
     <script src="https://js.braintreegateway.com/web/3.0.2/js/apple-pay.min.js"></script>
     <script src="https://js.braintreegateway.com/web/3.0.2/js//hosted-fields.min.js"></script>
   </head>

<body>
   <form id="checkout-form" action="/ios_checkout" method="post">
     <div id="error-message"></div>
     <div id="button"></div>
     <input type="hidden" name="payment_method_nonce">
     <input type="submit" value="Pay" disabled>
   </form>
</body>
<style>
.apple-pay-button {
    display: inline-block;
    background-size: 100% 60%;
    background-repeat: no-repeat;
    background-position: 50% 50%;
    border-radius: 5px;
    padding: 0px;
    box-sizing: border-box;
    min-width: 200px;
    min-height: 32px;
    max-height: 64px;
}

.apple-pay-button-black {
    background-image: -webkit-named-image(apple-pay-logo-white);
    background-color: black;
}

.apple-pay-button-white {
    background-image: -webkit-named-image(apple-pay-logo-black);
    background-color: white;
}

.apple-pay-button-white-with-line {
    background-image: -webkit-named-image(apple-pay-logo-black);
    background-color: white;
    border: .5px solid black;
}
</style>

<script>

var form = document.querySelector('#checkout-form');
var errorMessage = document.querySelector('#error-message');
var cvvLabel = document.querySelector('label[for="cvv"]');
var nonce = document.querySelector('input[name="payment_method_nonce"]');
var submitButton = document.querySelector('input[type="submit"]');

alert("js starts here");
braintree.client.create({
  authorization: "sandbox_54fcdrnq_yxb4zvxjdctbbppt"
}, function (err, client) {

 // Stop if there was a problem creating the Client.
 // This could happen if there is a network error or if the authorization
 // is invalid.
 if (err) {
   console.error('Error creating client:', err);
   return;
 }

 alert("no error setting up client");

if (window.ApplePaySession) {
if (ApplePaySession.canMakePayments()) {

alert("can make payments");
  braintree.applePay.create({
    client: client
  }, function (applePayErr, applePayInstance) {
    if (applePayErr) {
      console.error('Error creating applePayInstance:', applePayErr);
      return;
    }
    alert("time to setup up the button");
    var btn = document.createElement("BUTTON");
    btn.type = "button";
    btn.value = "my button";
    var placeHolder = document.getElementById("button");
    placeHolder.appendChild(btn);


    });
  }
  }
});

var paymentRequest = applePayInstance.createPaymentRequest({
 total: {
 label: 'My Store',
 amount: '19.99'
 }
});
console.log(paymentRequest.countryCode);
console.log(paymentRequest.currencyCode);
console.log(paymentRequest.merchantCapabilities);
console.log(paymentRequest.supportedNetworks);

var session = new ApplePaySession(1, paymentRequest);

session.onvalidatemerchant = function (event) {
  applePayInstance.performValidation({
    validationURL: event.validationURL,
    displayName: 'My Store'
  }, function (validationErr, merchantSession) {
    if (validationErr) {
      // You should show an error to the user, e.g. 'Apple Pay failed to load.'
      console.error('Error validating merchant:', validationErr);
      session.abort();
      return;
    }
    session.completeMerchantValidation(merchantSession);
  });
}

session.onpaymentauthorized = function (event) {
  applePayInstance.tokenize({
    token: event.payment.token
  }, function (tokenizeErr, payload) {
    if (tokenizeErr) {
      console.error('Error tokenizing Apple Pay:', tokenizeErr);
      session.completePayment(ApplePaySession.STATUS_FAILURE);
      return;
    }
    session.completePayment(ApplePaySession.STATUS_SUCCESS);

    // Send payload.nonce to your server.
  });
}

btn.onclick=session.begin();
</script>
</html>
